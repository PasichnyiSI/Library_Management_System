"""Initial migration

Revision ID: 0d0270bdfca3
Revises: 8bc2581d6678
Create Date: 2025-04-02 12:40:55.117641

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0d0270bdfca3'
down_revision: Union[str, None] = '8bc2581d6678'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_books_id', table_name='books')
    op.drop_index('ix_books_title', table_name='books')
    op.drop_table('books')
    op.drop_index('ix_genres_id', table_name='genres')
    op.drop_table('genres')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_usename', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_authors_id', table_name='authors')
    op.drop_index('ix_authors_name', table_name='authors')
    op.drop_table('authors')
    op.drop_index('ix_borrowers_id', table_name='borrowers')
    op.drop_index('ix_borrowers_name', table_name='borrowers')
    op.drop_table('borrowers')
    op.drop_index('ix_publishers_id', table_name='publishers')
    op.drop_table('publishers')
    op.drop_index('ix_borrowing_history_id', table_name='borrowing_history')
    op.drop_table('borrowing_history')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('borrowing_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('book_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('borrower_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('borrowed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('returned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name='borrowing_history_book_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['borrower_id'], ['borrowers.id'], name='borrowing_history_borrower_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='borrowing_history_pkey')
    )
    op.create_index('ix_borrowing_history_id', 'borrowing_history', ['id'], unique=False)
    op.create_table('publishers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('publishers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('established_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='publishers_pkey'),
    sa.UniqueConstraint('name', name='publishers_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_publishers_id', 'publishers', ['id'], unique=False)
    op.create_table('borrowers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='borrowers_pkey'),
    sa.UniqueConstraint('email', name='borrowers_email_key')
    )
    op.create_index('ix_borrowers_name', 'borrowers', ['name'], unique=False)
    op.create_index('ix_borrowers_id', 'borrowers', ['id'], unique=False)
    op.create_table('authors',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('authors_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('birthdate', sa.DATE(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='authors_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_authors_name', 'authors', ['name'], unique=True)
    op.create_index('ix_authors_id', 'authors', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('usename', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.create_index('ix_users_usename', 'users', ['usename'], unique=True)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_table('genres',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('genres_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='genres_pkey'),
    sa.UniqueConstraint('name', name='genres_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_genres_id', 'genres', ['id'], unique=False)
    op.create_table('books',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('isbn', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('published_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_available', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('genre_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('publisher_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], name='books_author_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name='books_genre_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['publisher_id'], ['publishers.id'], name='books_publisher_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='books_pkey'),
    sa.UniqueConstraint('isbn', name='books_isbn_key')
    )
    op.create_index('ix_books_title', 'books', ['title'], unique=False)
    op.create_index('ix_books_id', 'books', ['id'], unique=False)
    # ### end Alembic commands ###
